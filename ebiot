#!/usr/bin/env perl
use 5.010;
use strict;

use Proc::Fork;
use POSIX ();
use Getopt::Std;
use MLDBM qw( DB_File Data::Dumper );
use URI ();
use URI::QueryParam ();
use JSON::XS qw( decode_json );
use XML::LibXML ();
use HTML::Entities ();

BEGIN {
	require Time::Local;
	require Time::y2038::Everywhere;
	*Time::Local::timegm    = sub { goto &Time::y2038::timegm };
	*Time::Local::timelocal = sub { goto &Time::y2038::timelocal };
}

use AnyEvent::IRC::Client ();
use AnyEvent::IRC::Util qw( encode_ctcp );
use AnyEvent::HTTP qw( http_get );

$AnyEvent::HTTP::USERAGENT = 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)';

my $url_rx = qr{\b(https?://\S+)}i;

sub normalize {
	( map {
		$_ .= '';
		s/\s+/ /g;
		s/\A //;
		s/ \z//;
		(length) ? $_ : ();
	} @_ )[ 0 .. $#_ ]
}

sub lookup_urbandict {
	my ( $term, $cb ) = @_;

	my $uri = URI->new( 'http://www.urbandictionary.com/iphone/search/define' );
	$uri->query_param( term => $term );

	http_get $uri, sub {
		my ( $body, $hdr ) = @_;
		$cb->(), return if 200 ne $hdr->{'Status'};
		my $found = decode_json $body;
		$cb->( $found->{'result_type'}, $found->{'list'}[0] // {} );
	};
}

sub lookup_weather {
	my ( $location, $cb ) = @_;

	my $uri = URI->new( 'http://www.google.com/ig/api?hl=en-gb' );
	$uri->query_param( weather => $location );

	my $p = XML::LibXML->new;
	http_get $uri, (
		on_body => sub {
			my $hdr = $_[1];
			return 1 if $hdr->{'Status'} =~ /^3/;
			return unless 200 eq $hdr->{'Status'} and $hdr->{'content-type'} =~ m!\Atext/xml\s*(?:;|\z)!;
			$p->parse_chunk( $_[0] );
			return 1;
		},
		sub {
			my $doc = $p->parse_chunk( '', 1 );

			if ( my ( $problem ) = $doc->findnodes( '//problem_cause' ) ) {
				$cb->( $problem->findvalue( '@data' ) );
				return;
			}

			my ( $cc ) = $doc->findnodes( '//current_conditions' );

			my $temp = sprintf "%s\x{B0}F / %s\x{B0}C, %s", (
				$cc->findvalue( 'temp_f/@data' ),
				$cc->findvalue( 'temp_c/@data' ),
				$cc->findvalue( 'condition/@data' ),
			);

			$cb->(
				$doc->findvalue( '//forecast_information/city/@data' ),
				$temp,
				$cc->findvalue( 'humidity/@data' ),
				$cc->findvalue( 'wind_condition/@data' ),
			);
		},
	);
}

tie my %cookie_jar, 'MLDBM', 'cookiejar.db' or die $!;

my $title_rx = qr{<title(?: [^>]*)?>([^<]*)<}i;

sub get_tweet;

sub get_title_for_uri {
	my ( $uri, $cb ) = @_;

	my $orig_uri = $uri;
	for ( $uri ) {
		when ( m![/.]youtube\..*/user/.*\#.*/(.{11})\z! ) {
			$uri = 'http://youtube.com/watch?v=' . $1;
		}
	}

	if ( $uri =~ m!\btwitter\.com/.*/status(?:es)?/(\d+)! ) {
		get_tweet $1, $cb;
		return;
	}

	my ( $body, $title ) = '';
	http_get $uri, (
		cookie_jar => \%cookie_jar,
		on_header => sub {
			my $hdr = shift;
			return 1 if $hdr->{'Status'} =~ /^3/;
			return 200 eq $hdr->{'Status'} and $hdr->{'content-type'} =~ m!\Atext/html\s*(?:;|\z)!;
		},
		on_body => sub {
			return 1 if 200 ne $_[1]{'Status'};
			$body .= shift;
			return 1 unless $body =~ $title_rx;
			$title = $1;
			return;
		},
		sub {
			$title //= ( $body =~ $title_rx )[0];
			$title = HTML::Entities::decode $title if defined $title;
			$cb->( $title );
		},
	);
}

sub get_titles_for_uris {
	my ( @uri ) = @_;
	my $cb = pop @uri;

	# ensure titles are printed in original sequence of their URIs:
	my %title;
	for my $uri ( @uri ) {
		get_title_for_uri $uri, sub {
			my ( $title ) = @_;
			$title = normalize $title if defined $title;
			$title{ $uri } = $title;
			while ( exists $title{ $uri[0] } ) {
				my $title = $title{ shift @uri } // next;
				$cb->( $title );
			}
		};
	}
}

sub get_tweet {
	my ( $id, $cb ) = @_;

	my $uri = 'http://api.twitter.com/1/statuses/show.json?include_entities=1&id=' . $id;

	http_get $uri, (
		cookie_jar => \%cookie_jar,
		sub {
			my ( $body, $hdr ) = @_;

			return if 200 ne $hdr->{'Status'};

			my $data = decode_json $body;

			my $tweet = $data->{'text'};
			my $twit  = $data->{'user'}{'screen_name'};
			my $links = $data->{'entities'}{'urls'} // [];

			$tweet =~ s!&lt;!<!g;
			$tweet =~ s!&gt;!>!g;

			if ( not @$links ) {
				$cb->( "\@$twit: $tweet" );
				return;
			}

			my $num_resolved;
			for my $link ( @$links ) {
				my $tweeted = $link->{'url'};
				http_get $link->{'expanded_url'}, (
					cookie_jar => \%cookie_jar,
					sub {
						my ( undef, $hdr ) = @_;
						return if 200 ne $hdr->{'Status'};
						$tweet =~ s!\Q$tweeted!$hdr->{'URL'}!g;
						return if ++$num_resolved < @$links;
						$cb->( "\@$twit: $tweet" );
					},
				);
			}
		},
	);
}

sub main_loop {
	my ( $irc, $server, $port, $nick, @chan ) = @_;

	my $c = AnyEvent->condvar;

	my @w;
	$irc->reg_cb(
		registered => sub {
			my $quit = sub { $irc->send_msg( QUIT => 'Bye' ) };
			@w = map {
				my $sig = $_;
				AnyEvent->signal( signal => $sig, cb => $quit );
			} qw( INT QUIT TERM );
			$irc->enable_ping( 11 );
		},
		disconnect => sub { @w = (); $c->send },
	);

	$irc->send_srv( JOIN => $_ ) for @chan;

	$irc->connect( $server, $port, {
		nick => $nick,
		user => $nick,
		real => 'some dumb little bot',
	} );

	$c->recv;
}

my $irc = AnyEvent::IRC::Client->new;

$irc->reg_cb(
	publicmsg => sub {
		my ( $self, $chan, $msg ) = @_;

		my $send = sub { $irc->send_long_message( 'UTF-8', 0, PRIVMSG => $chan, encode_ctcp @_ ) };

		my $_ = $msg->{'params'}->[-1];

		if ( m/^!urban\s+(.*)/ ) {
			say "[$chan] !urban $1";
			lookup_urbandict $1, sub {
				my ( $type, $res ) = @_;
				given ( $type ) {
					when ( undef ) {
						$send->( [ ACTION => q(can't open the dictionary) ] );
						return;
					}
					when ( 'exact' ) {}
					when ( 'full_text' ) {
						$send->( [ ACTION => "found that in the definition for '$res->{'word'}'" ] );
					}
					default {
						$send->( [ ACTION => q(can't find that in the dictionary) ] );
						return;
					}
				}
				my $def = normalize $res->{'definition'};
				$send->( $def ) if defined $def;
			};
		}
		elsif ( m/^!weather\s+(.*)/ ) {
			say "[$chan] !weather $1";
			lookup_weather $1, sub { $send->( $_ ) for @_ };
		}
		elsif ( my @uri = m!$url_rx!g ) {
			say "[$chan] $_" for @uri;
			get_titles_for_uris @uri, sub { $send->( "[ $_[0] ]" ) };
		}
	}
);

our $opt_n;
getopts 'n';

die "usage: $0 [-n] <server> <port> <nick> <channel> [channel ...]\n"
	if 3 > @ARGV;

open my $outfh, '>>', 'ebiot.log'
	or die "Couldn't open logfile: $!\n";
select $outfh;
$|++;

# daemonize
run_fork { parent { exit } } unless $opt_n;

{
	open my $pidfh, '>', 'ebiot.pid'
		or die "Couldn't open pidfile: $!\n";
	say $pidfh $$;
	close $pidfh
		or die "Couldn't close pidfile: $!\n";
}

unless ( $opt_n ) {
	POSIX::setsid() or die "Cannot start a new session: $!\n";
	close $_ for *STDIN, *STDOUT, *STDERR;
}

main_loop $irc, @ARGV;
